{"version":3,"sources":["App/Models/pagination.ts","App/Api/agent.ts","App/Models/Activity.ts","App/Models/profile.ts","App/Stores/activityStore.ts","App/Stores/ProfileStore.ts","App/Stores/UserStore.ts","App/Stores/store.ts","App/Stores/CommonStore.ts","App/Stores/modalStore.ts","App/Stores/commentStore.ts","App/Layout/Navbar.tsx","Features/activities/dashboard/ActivityFilters.tsx","App/Tools/reduceText.ts","Features/profiles/FollowButton.tsx","Features/profiles/ProfileCard.tsx","Features/activities/dashboard/ActivityListItemAttendee.tsx","Features/activities/dashboard/ActivityListItem.tsx","Features/activities/dashboard/ActivityList.tsx","Features/activities/dashboard/ActivityListItemPlaceholder.tsx","Features/activities/dashboard/ActivityDashboard.tsx","App/common/form/MyTextInput.tsx","Features/users/LoginForm.tsx","Features/errors/ValidationErrorrs.tsx","Features/users/RegisterForm.tsx","Features/Home/Home.tsx","Features/Loading.tsx","App/common/form/MyTextArea.tsx","App/common/form/MySelectInput.tsx","App/common/options/categoryOptions.ts","App/common/form/MyDateInput.tsx","Features/activities/form/ActivityForm.tsx","Features/activities/details/activityDetailedChat.tsx","Features/activities/details/activityDetailedHeader.tsx","Features/activities/details/activityDetailedInfo.tsx","Features/activities/details/activityDetailedSidebar.tsx","Features/activities/details/ActivityDetails.tsx","Features/TestError.tsx","Features/errors/NotFound.tsx","Features/errors/ServerError.tsx","App/common/modals/ModalContainer.tsx","Features/profiles/EditProfileForm.tsx","Features/profiles/ProfileAbout.tsx","Features/profiles/ProfileActivities.tsx","Features/profiles/ProfileFollowings.tsx","App/common/imageUpload/PhotoWidgetCropper.tsx","App/common/imageUpload/PhotoWidgetDropzone.tsx","App/common/imageUpload/PhotoUploadWidgets.tsx","Features/profiles/ProfilePhotos.tsx","Features/profiles/ProfileContent.tsx","Features/profiles/ProfileHeader.tsx","Features/profiles/ProfilePage.tsx","App/Layout/PrivateRoute.tsx","App/Layout/App.tsx","reportWebVitals.ts","App/Layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","activity","edit","attend","Account","current","login","user","register","fbLogin","acessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","editProfile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","userName","displayName","image","ActivityStore","activityMap","Map","selectedActivity","openForm","updating","isLoading","deletingId","pagingParams","set","setPredicate","value","resetPredicate","forEach","activitiesByDate","Array","from","values","sort","b","getTime","setPagingParams","getActivity","runInAction","setLoading","insertActivity","console","log","loadActivities","axiosParams","res","setPagination","loading","setUpdating","deleteActivity","editActivity","updatedActivity","addActivity","userStore","attendee","newActivity","hostUsername","attendees","updateAttendence","isGoing","filter","x","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","entries","reduce","activities","split","some","profile","isHost","host","find","Date","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","tab","loadProfile","photo","photos","isMain","setImage","p","editProfileHandler","editProf","bio","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","getUser","getFacebookLoginStatus","window","FB","getLoginStatus","authResponse","accessToken","facebookLogin","apiLogin","catch","scope","localStorage","getItem","appLoaded","setAppLoaded","setItem","removeItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","err","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","reduceText","length","addDots","newStr","slice","dots","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","extra","Icon","styles","borderColor","borderWitdth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","format","secondary","clearing","floated","groupActivtiesByDate","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","GridColumn","Loader","MyTextInPut","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","selected","useParams","useHistory","activityState","setActivity","nullable","enableReinitialize","uuid","handleSubmitForm","placeholderText","showTimeSelect","timeCaption","dateFormat","rows","validationScheema","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","inline","message","Modal","onClose","setEdit","handleEditProfile","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidgets","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","ProfileFollowings","menuPosition","Statistic","PrivateRoute","Component","component","rest","useLocation","finally","hideProgressBar","path","Home","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.4e017466.chunk.js","sourcesContent":["export interface Pagination\r\n{\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T>\r\n{\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination)\r\n    {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams\r\n{\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber=1, pageSize=2)\r\n    {\r\n        this.pageSize = pageSize;\r\n        this.pageNumber = pageNumber;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\"\r\nimport { toast } from \"react-toastify\";\r\nimport { Activity, ActivityFormValues } from \"../Models/Activity\";\r\nimport {history} from \"../../\";\r\nimport { store } from \"../Stores/store\";\r\nimport { User, UserFormValues } from \"../Models/user\";\r\nimport { EditProfile, Photo, Profile, UserActivity } from \"../Models/profile\";\r\nimport { PaginatedResult } from \"../Models/pagination\";\r\nimport { URLSearchParams } from \"node:url\";\r\n\r\n\r\nconst sleep = (time: number)=>\r\n{\r\n    return new Promise(resolve=>{\r\n        setTimeout(resolve, time);\r\n    });\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\n\r\naxios.interceptors.request.use((config)=>\r\n{\r\n    const token = store.commonStore.token;\r\n    if(token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async (response) =>\r\n{\r\n\r\n    if(process.env.NODE_ENV === \"development\")\r\n    {\r\n        await sleep(1000);\r\n\r\n    }\r\n    const pagination = response.headers[\"pagination\"];\r\n    if(pagination)\r\n    {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n},(error: AxiosError)=>\r\n{\r\n    const {data, status, config} = error.response!;\r\n    switch(status)\r\n    {\r\n        case 400:\r\n            if(typeof data === \"string\")\r\n            {\r\n                toast.error(data);\r\n            }\r\n            if(config.method ===\"put\" && data.errors.hasOwnProperty(\"id\"))\r\n            {\r\n                history.push(\"/not-found\");\r\n            }\r\n            if(data.errors)\r\n            {\r\n                const modalStateErrors = [];\r\n                for(const key in data.errors)\r\n                {\r\n                    if(data.errors[key])\r\n                    {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n\r\n            break;\r\n        case 401:\r\n            toast.error(\"unauthorized\");\r\n            break;\r\n        case 404:\r\n            toast.error(\"not found\");\r\n            history.push(\"/notfound\");\r\n            break;\r\n        case 500:\r\n            toast.error(\"server error\");\r\n            store.commonStore.setServerError(data);\r\n            history.push(\"/server-error\");\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst request=\r\n{\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody)\r\n    \r\n}\r\n\r\nconst Activities=\r\n{\r\n\r\n    list: (params: URLSearchParams)=>axios.get<PaginatedResult<Activity[]>>(\"/activities\", {params}).then(responseBody),\r\n    details: (id: string)=>request.get<Activity>(`/activities/${id}`),\r\n    post: (activity: ActivityFormValues)=>request.post<void>(\"/activities\", activity),\r\n    edit: (activity: ActivityFormValues)=>request.put<void>(\"/activities/\"+activity.id, activity),\r\n    delete: (id: string)=>request.delete<void>(\"/activities/\"+id),\r\n    attend: (id: string)=>request.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account=\r\n{\r\n    current: ()=>request.get<User>(\"/account\"),\r\n    login: (user: UserFormValues)=>request.post<User>(\"/account/login\", user),\r\n    register: (user: UserFormValues)=>request.post<User>(\"/account/register\", user),\r\n    fbLogin: (acessToken: string)=>request.post<User>(\"/account/fbLogin?accessToken=\"+acessToken, {})\r\n}\r\n\r\nconst Profiles=\r\n{\r\n    get: (username: string)=>request.get<Profile>(\"/profiles/\"+username),\r\n    uploadPhoto: (file: Blob)=>{\r\n        let formData = new FormData();\r\n        formData.append(\"File\", file);\r\n        return axios.post<Photo>(\"photos\", formData, {\r\n            headers: {\"Content-type\": \"multipart/form-data\"}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string)=>request.post(`/photos/${id}/setmain`, {}),\r\n    deletePhoto: (id: string)=>request.delete(\"/photos/\"+id),\r\n    edit: (editProfile: EditProfile)=>request.put(\"/profiles\", editProfile),\r\n    updateFollowing: (username: string)=>request.post(\"/follow/\"+username, {}),\r\n    listFollowings: (username: string, predicate: string)=>\r\n        request.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        request.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent={\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity\r\n{\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    venue: string;\r\n    city: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    attendees: Profile[];\r\n    host?: Profile;\r\n    isGoing: Boolean;\r\n    isHost: Boolean;\r\n\r\n}\r\n\r\nexport class Activity implements Activity\r\n{\r\n    constructor(init? : ActivityFormValues)\r\n    {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues\r\n{\r\n    id?: string = undefined;\r\n    title: string = \"\";\r\n    category: string = \"\";\r\n    description: string = \"\";\r\n    date: Date | null = null;\r\n    city: string = \"\";\r\n    venue: string = \"\";\r\n\r\n    constructor(activity?: ActivityFormValues)\r\n    {\r\n        if(activity)\r\n        {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }\r\n    }\r\n\r\n\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile\r\n{\r\n    userName: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n    followingCount: number;\r\n    followersCount: number;\r\n    following: boolean;\r\n}\r\n\r\nexport class Profile implements Profile\r\n{\r\n    constructor(user: User)\r\n    {\r\n        this.userName = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface EditProfile\r\n{\r\n    displayName: string;\r\n    bio: string;\r\n}\r\n\r\nexport interface Photo\r\n{\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity \r\n{\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction} from \"mobx\";\r\nimport agent from \"../Api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../Models/Activity\";\r\nimport { Pagination, PagingParams } from \"../Models/pagination\";\r\nimport { Profile } from \"../Models/profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\n\r\nexport default class ActivityStore\r\n{\r\n    \r\n    activityMap = new Map<string, Activity>();\r\n\r\n    selectedActivity: Activity | undefined = undefined;\r\n    openForm = false;\r\n    updating = false;\r\n    isLoading = false;\r\n    deletingId: string | null = null;\r\n    pagination: Pagination | null = null;\r\n    pagingParams= new PagingParams();\r\n    predicate = new Map().set(\"all\", true);\r\n    \r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);       \r\n        reaction(()=>this.predicate.keys(), \r\n        ()=>{\r\n            this.pagingParams = new PagingParams(); \r\n            this.activityMap.clear();\r\n            this.loadActivities();\r\n        })\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date)=>\r\n    {\r\n        \r\n\r\n        const resetPredicate = ()=>\r\n        {\r\n            this.predicate.forEach((value, key)=>\r\n            {\r\n                if(key!==\"startDate\")\r\n                {\r\n                    this.predicate.delete(key);\r\n                }\r\n            })\r\n        }\r\n\r\n        switch(predicate)\r\n        {\r\n          \r\n            case \"all\":\r\n                resetPredicate();\r\n                this.predicate.set(\"all\", value);\r\n                break;\r\n            case \"isGoing\":\r\n                resetPredicate();\r\n                this.predicate.set(\"isGoing\", value);\r\n                break;\r\n            case \"isHost\":\r\n                resetPredicate();\r\n                this.predicate.set(\"isHost\", value);\r\n                break;\r\n            case \"startDate\":\r\n                this.predicate.delete(\"startDate\");\r\n                this.predicate.set(\"startDate\", value);\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    activitiesByDate = ()=>\r\n    {\r\n        const activities = Array.from(this.activityMap.values()).sort((a, b)=>\r\n        {\r\n            return a.date!.getTime()-b.date!.getTime();\r\n        });        \r\n        return activities;\r\n    \r\n    }\r\n    \r\n    setPagingParams = (pagingParams: PagingParams)=>\r\n    {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    get axiosParams()\r\n    {\r\n        const params = new URLSearchParams();\r\n        params.append(\"pageNumber\", this.pagingParams.pageNumber.toString());\r\n        params.append(\"pageSize\", this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key)=>\r\n        {\r\n            if(key === \"startDate\")\r\n            {\r\n                params.append(key, (value as Date).toISOString())\r\n            }\r\n            else\r\n            {\r\n                params.append(key, value);\r\n            }\r\n        });\r\n        return params;\r\n    }\r\n\r\n    get groupActivtiesByDate()\r\n    {\r\n\r\n        return Object.entries(this.activitiesByDate().reduce((activities, activity)=>\r\n        {\r\n            const date = activity.date!.toISOString().split(\"T\")[0];\r\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n            \r\n            return activities;\r\n            \r\n        }, {} as {[key: string]: Activity[]} ))\r\n    }\r\n\r\n    getActivity = async (id: string)=>\r\n    {\r\n        let activity = this.activityMap.get(id);\r\n        \r\n        if(activity)\r\n        {\r\n            runInAction(()=>\r\n            {\r\n                this.selectedActivity = activity;\r\n            })\r\n            return activity;\r\n\r\n        }\r\n        else\r\n        {\r\n            this.setLoading(true);\r\n\r\n            try\r\n            {\r\n                activity = await agent.Activities.details(id);\r\n                \r\n                \r\n                this.insertActivity(activity);\r\n                runInAction(()=>\r\n                {\r\n                    this.selectedActivity = activity;\r\n\r\n                });\r\n                this.setLoading(false);\r\n                \r\n                return activity;\r\n            }\r\n            catch(error)\r\n            {\r\n                console.log(error);\r\n                this.setLoading(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    insertActivity(activity: Activity)\r\n    {\r\n        const user = store.userStore.user;\r\n        if(user)\r\n        {\r\n            activity.isGoing = activity.attendees?.some((profile)=>\r\n            {\r\n                return profile.userName === user.username;\r\n            })\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(profile=>\r\n                {\r\n                    return profile.userName === activity.hostUsername;\r\n                })\r\n\r\n        }\r\n        \r\n\r\n        activity.date = new Date(activity.date!);\r\n        this.activityMap.set(activity.id, activity);\r\n    }\r\n\r\n    loadActivities = async () =>\r\n    {\r\n        this.setLoading(true);\r\n\r\n        try\r\n        {\r\n            const res = await agent.Activities.list(this.axiosParams);\r\n            res.data.forEach((activity)=>\r\n            {\r\n                this.insertActivity(activity);\r\n            });\r\n            this.setPagination(res.pagination);\r\n            this.setLoading(false);\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(error);\r\n            this.setLoading(false);\r\n        }\r\n        \r\n    }\r\n\r\n    setPagination = (pagination: Pagination)=>\r\n    {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    setLoading = (loading: boolean)=>\r\n    {\r\n        this.isLoading = loading;\r\n    }\r\n\r\n  \r\n\r\n    setUpdating = (updating: boolean)=>\r\n    {\r\n        this.updating = updating;\r\n    }\r\n\r\n    deleteActivity = async (id: string)=>\r\n    {\r\n        this.setUpdating(true);\r\n        this.deletingId = id;\r\n        try\r\n        {\r\n            await agent.Activities.delete(id);\r\n            this.activityMap.delete(id);\r\n            this.setUpdating(false);\r\n            \r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(error);\r\n            this.setUpdating(false);\r\n        }\r\n        \r\n    }\r\n    \r\n    editActivity = async(activity: ActivityFormValues)=>\r\n    {\r\n            \r\n        try\r\n        {\r\n            await agent.Activities.edit(activity);\r\n            runInAction(()=>\r\n            {\r\n                if(activity.id)\r\n                {\r\n                    let updatedActivity = {...this.activityMap.get(activity.id), ...activity};\r\n                    this.activityMap.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n            \r\n            \r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(error);\r\n            \r\n        }\r\n    }\r\n\r\n    addActivity = async (activity: ActivityFormValues)=>\r\n    {\r\n            \r\n            \r\n            const user = store.userStore.user;\r\n            const attendee = new Profile(user!);\r\n            \r\n            try\r\n            {\r\n                await agent.Activities.post(activity);\r\n                const newActivity = new Activity(activity);\r\n                newActivity.hostUsername = user!.username;\r\n                newActivity.attendees = [attendee];\r\n                this.insertActivity(newActivity);\r\n                runInAction(()=>\r\n                {\r\n                    this.selectedActivity=newActivity;\r\n                })\r\n                \r\n               \r\n            }\r\n            catch(error)\r\n            {\r\n                console.log(error);\r\n                \r\n            }\r\n    }\r\n    \r\n    updateAttendence = async ()=>\r\n    {\r\n        const user = store.userStore.user;\r\n        this.updating = true;\r\n        try\r\n        {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(()=>\r\n            {\r\n                if(this.selectedActivity?.isGoing)\r\n                {\r\n                    this.selectedActivity.attendees = \r\n                    this.selectedActivity.attendees?.filter(x=>x.userName !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                }\r\n                else\r\n                {\r\n                    this.selectedActivity?.attendees?.push(new Profile(user!));\r\n                    this.selectedActivity!.isGoing = true;\r\n\r\n                }\r\n                this.activityMap.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        }\r\n        catch(err)\r\n        {\r\n            console.log(err);\r\n        }\r\n        finally\r\n        {\r\n            runInAction(()=>\r\n            {\r\n                this.updating= false;\r\n            })\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async ()=>\r\n    {\r\n        this.updating = true;\r\n        try\r\n        {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(()=>\r\n            {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity!.isCancelled;\r\n                this.activityMap.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        }\r\n        catch(err)\r\n        {\r\n            console.log(err);\r\n        }\r\n        finally\r\n        {\r\n            runInAction(()=>\r\n            {\r\n                this.updating = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = ()=>\r\n    {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string)=>\r\n    {\r\n        this.activityMap.forEach(activity=>\r\n            {\r\n                activity.attendees.forEach(attendee=>\r\n                    {\r\n                        if(attendee.userName === username)\r\n                        {\r\n                            attendee.following? attendee.followersCount-- : attendee.followersCount++;\r\n                            attendee.following = !attendee.following;\r\n                        }\r\n                    })\r\n            })\r\n    }\r\n\r\n}\r\n\r\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../Api/agent\";\r\nimport { EditProfile, Photo, Profile, UserActivity } from \"../Models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore\r\n{\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings: boolean = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            ()=>this.activeTab,\r\n            activeTab=>\r\n            {\r\n                if(activeTab===3 || activeTab===4)\r\n                {\r\n                    const predicate = activeTab===3 ? \"followers\" : \"following\";\r\n                    this.loadFollowings(predicate);\r\n                }\r\n                else\r\n                {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (tab: any)=>\r\n    {\r\n        this.activeTab= tab;\r\n    }\r\n\r\n    get isCurrentUser()\r\n    {\r\n        if(store.userStore.user && this.profile)\r\n        {\r\n            return store.userStore.user.username === this.profile.userName;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string)=>\r\n    {\r\n        runInAction(()=>\r\n        {\r\n            this.loadingProfile = true;\r\n\r\n        })\r\n        try\r\n        {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(()=>\r\n            {\r\n                this.profile=profile;\r\n            })\r\n           \r\n\r\n                \r\n        }\r\n        catch(err)\r\n        {\r\n            console.log(err)\r\n        }\r\n        finally\r\n        {\r\n            runInAction(()=>\r\n            {\r\n                this.loadingProfile = false;\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file:Blob)=>\r\n    {\r\n        runInAction(()=>\r\n        {\r\n            this.uploading = true;\r\n        })\r\n        \r\n\r\n        try\r\n        {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(()=>\r\n            {\r\n                if(this.profile)\r\n                {\r\n                    this.profile.photos?.push(photo);\r\n                    if(photo.isMain && store.userStore.user)\r\n                    {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                \r\n            });\r\n        }\r\n        catch(err)\r\n        {\r\n            console.log(err);\r\n        }\r\n        finally\r\n        {\r\n            this.uploading = false;\r\n        }\r\n    }\r\n\r\n    setMainPhoto= async (photo: Photo)=>\r\n    {\r\n        this.loading = true;\r\n\r\n        try\r\n        {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(()=>\r\n            {\r\n                if(this.profile && this.profile.photos)\r\n                {\r\n                    this.profile.photos.find(p=>p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p=>p.id===photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        }\r\n        catch(err)\r\n        {\r\n            console.log(err);\r\n        }\r\n        finally\r\n        {\r\n            runInAction(()=>\r\n            {\r\n             this.loading = false;\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    deletePhoto= async (photo: Photo)=>\r\n    {\r\n        this.loading = true;\r\n        try\r\n        {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(()=>\r\n            {if(this.profile && this.profile.photos)\r\n            {\r\n                this.profile.photos = this.profile.photos.filter(p=>p.id !== photo.id);\r\n            }});\r\n        }\r\n        catch(err)\r\n        {\r\n            console.log(err);\r\n        }\r\n        finally\r\n        {\r\n            runInAction(()=>\r\n            {\r\n                this.loading = false;\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    editProfileHandler = async (editProf: EditProfile)=>\r\n    {\r\n        this.loading = true;\r\n        try\r\n        {\r\n            if(this.profile)\r\n            {\r\n                this.profile.bio = editProf.bio;\r\n                this.profile.displayName = editProf.displayName;\r\n                await agent.Profiles.edit(editProf);\r\n            }\r\n        }\r\n        catch(err)\r\n        {\r\n            console.log(err);\r\n        }\r\n        finally\r\n        {\r\n            runInAction(()=>\r\n            {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean)=>\r\n    {\r\n        this.loading = true;\r\n        try\r\n        {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(()=>\r\n            {\r\n                if(this.profile && this.profile.userName !== store.userStore.user?.username && this.profile.userName === username)\r\n                {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following  = !this.profile.following;\r\n                }\r\n                if(this.profile && this.profile.userName === store.userStore.user?.username)\r\n                {\r\n                    following ? this.profile.followingCount++: this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile=>\r\n                {\r\n                    if(profile.userName === username)\r\n                    {\r\n                        profile.following ? profile.followersCount--: profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(error);    \r\n        }\r\n        finally\r\n        {\r\n            runInAction(()=>\r\n            {\r\n                this.loading = false;\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    loadFollowings = async (predicate: string)=>\r\n    {\r\n        this.loadingFollowings = true;\r\n        try\r\n        {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.userName, predicate)\r\n            runInAction(()=>\r\n            {\r\n                this.followings = followings;\r\n            })\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(error);\r\n        }\r\n        finally\r\n        {\r\n            runInAction(()=>\r\n            {\r\n                this.loadingFollowings = false;\r\n            })\r\n            \r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => \r\n    {\r\n        this.loadingActivities = true;\r\n        try \r\n        {\r\n            const activities = await agent.Profiles.listActivities(username,\r\n            predicate!);\r\n            runInAction(() => \r\n            {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } \r\n        catch (error) \r\n        {\r\n            console.log(error);\r\n            runInAction(() => \r\n            {\r\n                this.loadingActivities = false;\r\n            });\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../Api/agent\";\r\nimport { User, UserFormValues } from \"../Models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore\r\n{\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn()\r\n    {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues)=>\r\n    {\r\n        try\r\n        {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(()=>{\r\n                this.user = user;\r\n\r\n            })\r\n            history.push(\"/activities\");\r\n            store.modalStore.closeModal();\r\n            \r\n        }\r\n        catch(error)\r\n        {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = ()=>\r\n    {\r\n        store.commonStore.setToken(null);\r\n        this.user = null;\r\n        history.push(\"/\");\r\n    }\r\n\r\n    getUser = async () =>\r\n    {\r\n        try\r\n        {\r\n            const user = await agent.Account.current();\r\n            runInAction(()=>this.user=user);\r\n\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues)=>\r\n    {\r\n        try\r\n        {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(()=>{\r\n                this.user = user;\r\n\r\n            })\r\n            history.push(\"/activities\");\r\n            store.modalStore.closeModal();\r\n            \r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"nevalja \" + error);\r\n            throw error;\r\n        }       \r\n    }\r\n\r\n    setImage = (image: string)=>\r\n    {\r\n        if(this.user)\r\n        {\r\n            this.user.image = image;\r\n\r\n        }\r\n    }\r\n\r\n    getFacebookLoginStatus = async ()=>\r\n    {\r\n        \r\n        window.FB.getLoginStatus(response=>\r\n            {\r\n                if(response.status === \"connected\")\r\n                {\r\n                    this.fbAccessToken =  response.authResponse.accessToken;\r\n                }\r\n            })\r\n    }\r\n\r\n    facebookLogin = ()=>\r\n    {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user=>\r\n                {\r\n                    store.commonStore.setToken(user.token);\r\n                    runInAction(()=>\r\n                    {\r\n                        this.user = user;\r\n                        this.fbLoading = false;\r\n                    });\r\n                    history.push(\"/activities\");    \r\n\r\n                }).catch(error=>{\r\n                    console.log(error);\r\n                    runInAction(()=>\r\n                    {\r\n                        this.fbLoading = false;\r\n                    });\r\n                })\r\n\r\n        }\r\n\r\n        if(this.fbAccessToken)\r\n        {\r\n            apiLogin(this.fbAccessToken);\r\n        }\r\n        else\r\n        {\r\n            window.FB.login((response)=>\r\n            {\r\n                apiLogin(response.authResponse.accessToken);\r\n            },{scope: \"public_profile,email\"});\r\n        }\r\n        \r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport { CommonStore } from \"./CommonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./ProfileStore\";\r\nimport UserStore from \"./UserStore\";\r\n\r\ninterface Store\r\n{\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore:ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    \r\n    return useContext(StoreContext);\r\n}\r\n\r\n","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../Models/ServerError\";\r\n\r\nexport class CommonStore\r\n{\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem(\"jwt\");\r\n    appLoaded = false;\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            ()=>this.token,\r\n            (token)=>{\r\n                if(token)\r\n                {\r\n                    window.localStorage.setItem(\"jwt\", token);\r\n                }\r\n                else\r\n                {\r\n                    window.localStorage.removeItem(\"jwt\");\r\n                }\r\n\r\n            }\r\n        );\r\n    }\r\n\r\n    setServerError = (error: ServerError)=>\r\n    {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken=(token: string | null)=>\r\n    {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded= (appLoaded = true)=>\r\n    {\r\n        this.appLoaded = appLoaded;\r\n    }\r\n\r\n\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal\r\n{\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\n\r\nexport default class ModalStore\r\n{\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n\r\n\r\n    }\r\n\r\n    openModal = (content: JSX.Element)=>\r\n    {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = ()=>\r\n    {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../Models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore\r\n{\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string)=>\r\n    {\r\n        if(store.activityStore.selectedActivity)\r\n        {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL+\"?activityId=\"+store.activityStore.selectedActivity.id,\r\n                {\r\n                    accessTokenFactory: ()=>store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n            this.hubConnection.start().catch(err=>console.log(\"error establishing connection: \", err));\r\n            this.hubConnection.on(\"LoadComments\", (comments: ChatComment[])=>\r\n            {\r\n                runInAction(()=>\r\n                {\r\n                    comments.forEach(comment=>\r\n                        {\r\n                            comment.createdAt = new Date(comment.createdAt + \"Z\");\r\n                        })   \r\n                    this.comments = comments;\r\n                });\r\n            });\r\n            this.hubConnection.on(\"ReciveComment\", (comment: ChatComment)=>\r\n            {\r\n               \r\n\r\n                runInAction(()=>\r\n                {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n               \r\n\r\n                    this.comments.unshift(comment);\r\n\r\n                })\r\n            });\r\n\r\n        }\r\n\r\n        \r\n    }\r\n    stopHubConnection = () =>\r\n    {\r\n        this.hubConnection?.stop().catch(err=>console.log(\"error closing connection: \", err));\r\n    }\r\n    clearComments = ()=>\r\n    {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n    \r\n    addComment = async(values: any)=>\r\n    {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try\r\n        {\r\n            await this.hubConnection?.invoke(\"SendComment\", values);\r\n        }\r\n        catch(err)\r\n        {\r\n            console.log(err);\r\n        }\r\n    }\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Menu, Image, Dropdown } from \"semantic-ui-react\";\r\nimport { useStore } from \"../Stores/store\";\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n\r\n    return (\r\n\r\n        <Menu inverted fixed=\"top\">\r\n            <Container>\r\n                <Menu.Item as={NavLink} exact to=\"/\">\r\n                    <img src=\"/assets/Images/logo.png\" alt=\"logo\" style={{ marginRight: 10 }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to=\"/activities\" name=\"Activities\" />\r\n                <Menu.Item as={NavLink} to=\"/errors\" name=\"Errors\" />\r\n\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to=\"/createActivity\" positive content=\"Create activity\" />\r\n                </Menu.Item>\r\n                <Menu.Item position=\"right\">\r\n                    <Image src={user?.image || \"/assets/Images/user.png\"} avatar spaced=\"right\" />\r\n                    <Dropdown pointing=\"top left\" text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} icon=\"user\" to={`/profiles/${user?.username}`} text=\"My profile\" />\r\n                            <Dropdown.Item onClick={logout} text=\"Logout\" icon=\"power\" />\r\n                        </Dropdown.Menu>\r\n\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\"\r\nimport React from \"react\"\r\nimport Calendar from \"react-calendar\"\r\nimport { Header, Menu } from \"semantic-ui-react\"\r\nimport { useStore } from \"../../../App/Stores/store\";\r\n\r\nexport default observer(function ActivityFilters() {\r\n\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size=\"large\" style={{ width: \"100%\", marginTop: 25 }}>\r\n                <Header icon=\"filter\" attached color=\"teal\" content=\"filters\" />\r\n                <Menu.Item \r\n                    content=\"All activities\" \r\n                    active={predicate.has(\"all\")}\r\n                    onClick={()=>setPredicate(\"all\",\"true\")}\r\n\r\n                    />\r\n                <Menu.Item \r\n                    content=\"I am going\"\r\n                    active={predicate.has(\"isGoing\")}\r\n                    onClick={()=>setPredicate(\"isGoing\",\"true\")} \r\n                    />\r\n                <Menu.Item \r\n                    content=\"I am hosting\"\r\n                    active={predicate.has(\"isHost\")}\r\n                    onClick={()=>setPredicate(\"isHost\",\"true\")}\r\n                    />\r\n            </Menu>\r\n            <Header/>\r\n            <Calendar\r\n                onChange={(date)=>setPredicate(\"startDate\", date as Date)}\r\n                value={predicate.get(\"startDate\") || new Date()}\r\n            />\r\n        </>\r\n    )\r\n});","export function reduceText(text: string, length: number = 100, addDots: boolean=true)\r\n{\r\n    if(text.length > length)\r\n    {\r\n        const newStr = text.slice(0, length);\r\n        const dots = addDots? \"...\" : \"\";\r\n        return newStr+dots;\r\n\r\n    }\r\n    return text;\r\n    \r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\"\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../App/Models/profile\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\n\r\ninterface Props\r\n{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}: Props)\r\n{\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if(userStore.user?.username === profile.userName) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string)\r\n    {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false): updateFollowing(username, true);\r\n    }\r\n\r\n    return(\r\n        <Reveal animated=\"move\">\r\n                        <Reveal.Content visible style={{width: \"100%\"}}>\r\n                            <Button fluid color=\"teal\" \r\n                            content={profile.following ? \"Following\" : \"Not Following\"}/>\r\n                        </Reveal.Content>\r\n                        <Reveal.Content hidden style={{width: \"100%\"}}>\r\n                            <Button fluid \r\n                                    basic\r\n                                    loading = {loading}\r\n                                    \r\n                                    color={profile.following ? \"red\": \"green\"} \r\n                                    content={profile.following ? \"Unfollow\": \"Follow\"}\r\n                                    onClick={(e)=>handleFollow(e, profile.userName)}/>\r\n                        </Reveal.Content>\r\n                    </Reveal>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image} from \"semantic-ui-react\";\r\nimport { Profile } from \"../../App/Models/profile\";\r\nimport { reduceText } from \"../../App/Tools/reduceText\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props\r\n{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props)\r\n{\r\n    return(\r\n        <Card as={Link} to={\"/profiles/\"+profile.userName}>\r\n            <Image src={profile.image || \"/assets/Images/user.png\"} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{reduceText(profile.bio? profile.bio : \"\")}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra >\r\n                <Icon name=\"user\">\r\n                    {profile.followersCount} followers\r\n                </Icon>\r\n            </Card.Content>\r\n            <FollowButton profile={profile}/>\r\n\r\n        </Card>\r\n    )\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { List, Image, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../App/Models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props\r\n{\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees}:Props)\r\n{\r\n    const styles=\r\n    {\r\n        borderColor: \"orange\",\r\n        borderWitdth: 3\r\n    }\r\n\r\n    return(\r\n        <List horizontal>\r\n            {attendees.map(attendee=>(\r\n            <Popup \r\n            hoverable \r\n            key={attendee.userName}\r\n            trigger={\r\n                <List.Item key={attendee.userName} as={Link} to={`/profiles/${attendee.userName}`}>\r\n                    <Image size=\"mini\" \r\n                            circular src={attendee.image || \"/assets/Images/user.png\"}\r\n                            bordered\r\n                            style={attendee.following ? styles : null}\r\n                            />\r\n\r\n                </List.Item>\r\n            }>\r\n                <Popup.Content>\r\n                    <ProfileCard profile={attendee}/>\r\n                </Popup.Content>\r\n            </Popup>\r\n\r\n            \r\n            ))}\r\n            \r\n        </List>\r\n    )\r\n});","import React from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\"\r\nimport { Activity } from \"../../../App/Models/Activity\"\r\nimport { format } from \"date-fns\"\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {\r\n                    activity.isCancelled &&\r\n                    <Label attached=\"top\" color=\"red\" content=\"Canceled\" style={{textAlign:\"center\"}}/>\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom:3}} size=\"tiny\" circular src={activity.host?.image || \"/assets/Images/user.png\"} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>{activity.title}</Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by <Link to={\"/profiles/\"+activity.host?.userName}>{activity.host?.displayName}</Link>\r\n                                {activity.isHost && <Item.Description>\r\n                                    <Label basic color=\"orange\">\r\n                                        You are hosting this activity\r\n                                </Label>\r\n                                </Item.Description>}\r\n                                {activity.isGoing && !activity.isHost && <Item.Description>\r\n                                    <Label basic color=\"green\">\r\n                                        You are going to this activity\r\n                                </Label>\r\n                                </Item.Description>}\r\n                            </Item.Description>\r\n                        </Item.Content>\r\n\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name=\"clock\" />{format(activity.date!, \"dd MMM yyyy h:mm aa\")}\r\n                    <Icon name=\"marker\" />{activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>\r\n                    {activity.description}\r\n                    <Button as={Link}\r\n                        to={`/activities/${activity.id}`}\r\n                        floated=\"right\" content=\"View\"\r\n                        color=\"teal\" />\r\n                </span>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { groupActivtiesByDate } = activityStore;\r\n\r\n    return (\r\n        <>\r\n\r\n            {groupActivtiesByDate.map(([date, activities]) =>\r\n\r\n            (<Fragment key={date} >\r\n                <Header sub color=\"teal\">\r\n                    {date}\r\n                </Header>\r\n\r\n\r\n                {activities.map(activity =>\r\n\r\n                    (<ActivityListItem key={activity.id} activity={activity} />)\r\n\r\n\r\n                )}\r\n            </Fragment>)\r\n            )}\r\n\r\n\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\"\r\nimport React, { useState } from \"react\"\r\nimport { useEffect } from \"react\"\r\nimport {Container, Grid, GridColumn, Loader } from \"semantic-ui-react\"\r\nimport { useStore } from \"../../../App/Stores/store\"\r\nimport ActivityFilters from \"./ActivityFilters\"\r\nimport ActivityList from \"./ActivityList\"\r\nimport \"react-calendar/dist/Calendar.css\"\r\nimport { PagingParams } from \"../../../App/Models/pagination\"\r\nimport InfiniteScroll from \"react-infinite-scroller\"\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\"\r\n\r\n\r\nexport default observer(function ActivityDashboard()\r\n{\r\n    const {activityStore} = useStore();\r\n    const {loadActivities,  setPagingParams, pagination} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleNext()\r\n    {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage+1))\r\n        loadActivities().then(()=>setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => \r\n    {\r\n\r\n        if(activityStore.activityMap.size <= 1)\r\n        {\r\n            activityStore.loadActivities();\r\n\r\n        }\r\n\r\n        \r\n    }, [activityStore])\r\n\r\n    \r\n\r\n    \r\n\r\n    return(\r\n    <Container style={{marginTop: \"7em\"}}>\r\n    \r\n    <Grid>\r\n        <Grid.Column width=\"10\">\r\n            {activityStore.isLoading && !loadingNext ? (\r\n                <>\r\n                    <ActivityListItemPlaceholder/>\r\n                    <ActivityListItemPlaceholder/>\r\n                </>\r\n            ): (\r\n                <InfiniteScroll \r\n                pageStart={0}\r\n                loadMore={handleNext}\r\n                hasMore={!loadingNext && !!pagination && pagination?.currentPage<pagination?.totalPages}\r\n                initialLoad={false}\r\n                >\r\n                <ActivityList/>\r\n\r\n                </InfiniteScroll>\r\n            )}\r\n            \r\n            \r\n        </Grid.Column>\r\n        <GridColumn width=\"6\">\r\n            <ActivityFilters/>\r\n        </GridColumn>\r\n        <Grid.Column width=\"10\">\r\n            <Loader active={loadingNext}/>\r\n        </Grid.Column>\r\n    </Grid>\r\n    \r\n   </Container>\r\n)\r\n});\r\n\r\n","import { useField } from \"formik\";\r\nimport React from \"react\"\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nexport default function MyTextInPut(props: Props)\r\n{   \r\n    const [field, meta] = useField(props.name);\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\" >{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\"\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\"\r\nimport { Button, Header, Label } from \"semantic-ui-react\"\r\nimport MyTextInPut from \"../../App/common/form/MyTextInput\"\r\nimport { useStore } from \"../../App/Stores/store\";\r\n\r\n\r\nexport default observer(function LoginForm()\r\n{\r\n    const {userStore} = useStore();\r\n\r\n    return(\r\n        <Formik initialValues={{email: \"\", password: \"\", error: null}}\r\n            onSubmit={(values, {setErrors})=>userStore.login(values)\r\n                .catch(error=>setErrors({error: \"Invalid email or password\"}))}>\r\n                {({handleSubmit, isSubmitting, errors})=>(\r\n                    <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                        <Header as=\"h2\" content=\"Login to Reactivities\" color=\"teal\" textAlign=\"center\"/>\r\n                        <MyTextInPut name=\"email\" placeholder=\"email\"/>\r\n                        <MyTextInPut name=\"password\" placeholder=\"password\" type=\"password\"/>\r\n                        <ErrorMessage name=\"error\" \r\n                            render={()=><Label style={{marginBottom: 10}} basic color=\"red\" content={errors.error} />}/>\r\n                                \r\n                       \r\n                        <Button loading={isSubmitting} positive content=\"login\" type=\"Submit\" fluid/>                            \r\n                        \r\n                    </Form>    \r\n                )}\r\n            \r\n        </Formik>\r\n    )\r\n});","import React from \"react\"\r\nimport { Message } from \"semantic-ui-react\"\r\n\r\ninterface Props\r\n{\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props)\r\n{\r\n    return(\r\n        <Message error>\r\n            <Message.List>\r\n            {errors&&\r\n            errors.map((error: any, i: any)=>(\r\n                <Message.Item key={i}>{error}</Message.Item>\r\n            ))}\r\n            </Message.List>\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\"\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\"\r\nimport { Button, Header } from \"semantic-ui-react\"\r\nimport MyTextInPut from \"../../App/common/form/MyTextInput\"\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport * as Yup from \"yup\"\r\nimport ValidationErrors from \"../errors/ValidationErrorrs\";\r\n\r\nexport default observer(function RegisterForm()\r\n{\r\n    const {userStore} = useStore();\r\n \r\n    return(\r\n        <Formik initialValues={{displayName:\"\", username: \"\", email: \"\", password: \"\", error: null}}\r\n            onSubmit={(values, {setErrors})=>userStore.register(values)\r\n                .catch(error=>setErrors({error}))}\r\n                validationSchema={Yup.object(\r\n                    {\r\n                        displayName: Yup.string().required(),\r\n                        username: Yup.string().required(),\r\n                        email: Yup.string().required().email(),\r\n                        password: Yup.string().required()\r\n                    })}>\r\n                {({handleSubmit, isSubmitting, errors, isValid, dirty})=>(\r\n                    <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                        <Header as=\"h2\" content=\"Sign up to Reactivities\" color=\"teal\" textAlign=\"center\"/>\r\n                        <MyTextInPut name=\"displayName\" placeholder=\"displayName\"/>\r\n                        <MyTextInPut name=\"username\" placeholder=\"username\"/>\r\n                        <MyTextInPut name=\"email\" placeholder=\"email\"/>\r\n                        <MyTextInPut name=\"password\" placeholder=\"password\" type=\"password\"/>\r\n                        <ErrorMessage name=\"error\" \r\n                            render={()=><ValidationErrors errors={errors.error}/>}/>\r\n                                \r\n                       \r\n                        <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content=\"Register\" type=\"Submit\" fluid/>                            \r\n                        \r\n                    </Form>    \r\n                )}\r\n            \r\n        </Formik>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\"\r\nimport React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { Container, Header, Segment, Image, Button, Divider } from \"semantic-ui-react\"\r\nimport { useStore } from \"../../App/Stores/store\"\r\nimport LoginForm from \"../users/LoginForm\"\r\nimport RegisterForm from \"../users/RegisterForm\"\r\n\r\nexport default observer(function Home() {\r\n\r\n    const { userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\r\n            <Container text>\r\n                <Header as=\"h1\" inverted>\r\n                    <Image size=\"massive\" src=\"/assets/Images/logo.png\" alt=\"logo\" style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as=\"h2\" inverted content=\"Welcome to Reactivities\" />\r\n                        <Button size=\"huge\" inverted as={Link} to=\"/activities\">\r\n                            Go to Activities\r\n                        </Button>\r\n                    </>\r\n                ): (\r\n                    \r\n                    <>\r\n                        <Button size=\"huge\" inverted onClick={()=>{modalStore.openModal(<LoginForm/>)}}>\r\n                        Login\r\n                        </Button>\r\n\r\n                        <Button size=\"huge\" inverted onClick={()=>{modalStore.openModal(<RegisterForm/>)}}>\r\n                        Register\r\n                        </Button>\r\n                        \r\n                        <Divider horizontal inverted>Or</Divider>\r\n                        <Button \r\n                            loading={userStore.fbLoading}\r\n                            size=\"huge\"\r\n                            inverted\r\n                            color=\"facebook\"\r\n                            content=\"Login with Facebook\"\r\n                            onClick={userStore.facebookLogin}\r\n                        />\r\n                    </>\r\n                )}\r\n                \r\n\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from \"react\"\r\nimport { Dimmer, Loader } from \"semantic-ui-react\"\r\n\r\ninterface Props\r\n{\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted=true, content=\"loading...\"}: Props)\r\n{\r\n    return(\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\"\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n\r\n}\r\n\r\nexport default function MyTextArea(props: Props)\r\n{   \r\n    const [field, meta] = useField(props.name);\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\" >{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\"\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n\r\n}\r\n\r\nexport default function MySelectInput(props: Props)\r\n{   \r\n    const [field, meta, helpers] = useField(props.name);\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e,d)=>{helpers.setValue(d.value)}}\r\n                onBlur={()=>{helpers.setTouched(true)}}\r\n                placeholder={props.placeholder}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\" >{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","\r\nexport const categoryOptions = \r\n[\r\n    {text: \"Drinks\", value: \"drinks\"},\r\n    {text: \"Culture\", value: \"culture\"},\r\n    {text: \"Film\", value: \"film\"},\r\n    {text: \"Food\", value: \"food\"},\r\n    {text: \"Music\", value: \"music\"},\r\n\r\n    {text: \"Travel\", value: \"travel\"}\r\n\r\n    \r\n]","import { useField } from \"formik\";\r\nimport React from \"react\"\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from \"react-datepicker\"\r\n\r\nexport default function MyTextInPut(props: Partial<ReactDatePickerProps>)\r\n{   \r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n            {...props}\r\n            {...field}\r\n            selected={(field.value && new Date(field.value)) || null}\r\n            onChange={value=>helpers.setValue(value)}\r\n\r\n            />\r\n            \r\n            {(meta.touched && meta.error) ? (\r\n                <Label basic color=\"red\" >{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Segment, Header } from \"semantic-ui-react\";\r\nimport {  ActivityFormValues } from \"../../../App/Models/Activity\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport LoadingComponent from \"../../Loading\";\r\nimport {v4 as uuid} from \"uuid\"\r\nimport { Formik, Form} from \"formik\";\r\nimport * as Yup from \"yup\" \r\nimport MyTextInPut from \"../../../App/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../App/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../App/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../App/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../App/common/form/MyDateInput\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nexport default observer(function ActivityForm()\r\n{\r\n\r\n    const activityStore = useStore().activityStore;\r\n    const { isLoading, addActivity, editActivity,  getActivity} = activityStore;\r\n  \r\n    const {id} = useParams<{id:string}>();\r\n    const history = useHistory();\r\n\r\n\r\n    const [activityState, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required(),\r\n        category: Yup.string().required(),\r\n        description: Yup.string().required(),\r\n\r\n        date: Yup.string().required(\"Date is required\").nullable(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required()\r\n    })\r\n       \r\n\r\n    useEffect(()=>\r\n    {\r\n        \r\n        if(id)\r\n        {\r\n            getActivity(id).then((activity)=>\r\n            {\r\n                setActivity(new ActivityFormValues(activity));\r\n            })\r\n        }\r\n\r\n    },[id, getActivity]);\r\n\r\n   function handleSubmitForm(activity: ActivityFormValues)\r\n   {\r\n        if(!activity.id)\r\n        {\r\n            let newActivity = {...activity, id: uuid()};\r\n            addActivity(newActivity).then(()=>history.push(\"/activities/\"+newActivity.id));\r\n        }\r\n        else\r\n        {\r\n            editActivity(activity).then(()=>history.push(\"/activities/\"+activity.id));\r\n        }\r\n   }\r\n\r\n    if(isLoading)\r\n    {\r\n        return(\r\n            <LoadingComponent/>\r\n        )\r\n    }\r\n\r\n\r\n   \r\n    return(\r\n    <Segment clearing>\r\n        <Formik validationSchema={validationSchema} enableReinitialize initialValues={activityState} onSubmit={values=>{handleSubmitForm(new ActivityFormValues(values))}}>\r\n            {({ handleSubmit, dirty, isSubmitting, isValid})=>(\r\n                    <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Header content=\"Activity Details\" sub color=\"teal\"/>\r\n                    \r\n                    <MyTextInPut name=\"title\" placeholder=\"Title\"/>\r\n                    <MyDateInput \r\n                    placeholderText=\"Date\" \r\n                    name=\"date\"\r\n                    showTimeSelect\r\n                    timeCaption=\"time\"\r\n                    dateFormat=\"MMMM d, yyyy h:mm aa\" />\r\n                    <MyTextArea rows={2} placeholder=\"Description\" name=\"description\" />\r\n                    <MySelectInput options={categoryOptions} placeholder=\"Category\" name=\"category\" />\r\n                    <Header content=\"Location Details\" sub color=\"teal\"/>\r\n\r\n                    <MyTextInPut placeholder=\"Venue\" name=\"venue\" />\r\n                    <MyTextInPut placeholder=\"City\" name=\"city\" />\r\n                    <Button disabled={!dirty || !isValid || isSubmitting} loading={isSubmitting} positive type=\"submit\" floated=\"right\" content=\"Submit\" />\r\n                    <Button as={Link} to=\"/activities\" floated=\"right\" type=\"button\" content=\"Cancel\"/>\r\n                </Form>\r\n            )\r\n\r\n            }\r\n        </Formik>\r\n        \r\n    </Segment>\r\n    )\r\n});","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../App/Stores/store'\r\nimport * as Yup from \"yup\"\r\nimport { formatDistanceToNow } from \"date-fns\";\r\ninterface Props\r\n{\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(()=>\r\n    {\r\n        if(activityId)\r\n        {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return ()=>\r\n        {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [activityId, commentStore])\r\n\r\n    const validationScheema = Yup.object(\r\n    {\r\n        body: Yup.string().required()\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Formik onSubmit={(values, {resetForm})=>commentStore.addComment(values)\r\n                        .then(()=>resetForm())}\r\n                            initialValues={{body: \"\"}}\r\n                            validationSchema={validationScheema}\r\n                    >\r\n                        {({isSubmitting, isValid, handleSubmit})=>(\r\n                            <Form className=\"ui form\">\r\n                            <Field name=\"body\">\r\n                                {(props: FieldProps)=>(\r\n                                    <div style={{position:\"relative\"}}>\r\n                                        <Loader active={isSubmitting}/>\r\n                                        <textarea\r\n                                            placeholder=\"Enter your comment (Enter to submit, Enter + Shift for new line) \"\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e=>{\r\n                                                if(e.key === \"Enter\" && e.shiftKey)\r\n                                                {\r\n                                                    return;\r\n                                                }\r\n                                                if(e.key === \"Enter\" && !e.shiftKey)\r\n                                                {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                        )}\r\n                    </Formik>\r\n            <Segment attached clearing>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment=>(\r\n                        <Comment key={comment.id}>\r\n                        <Comment.Avatar src={comment.image || '/assets/Images/user.png'}/>\r\n                        <Comment.Content>\r\n                            <Comment.Author as={Link} to={\"/profiles/\"+comment.username}>{comment.displayName}</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text style={{whiteSpace: \"pre-wrap\"}}>{comment.body}</Comment.Text>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n                    ))}\r\n                    \r\n\r\n                    \r\n                    \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n\r\n\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../App/Models/Activity\";\r\nimport { format } from \"date-fns\"\r\nimport { useStore } from '../../../App/Stores/store';\r\n\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendence, updating, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: \"absolute\", zIndex: 1000, left: -14, top: 20 }} ribbon color=\"red\" content=\"Cancelled\" />\r\n                }\r\n                <Image src={`/assets/Images/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, \"dd MMM yyy\")}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.userName}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ?\r\n\r\n                    (\r\n                        <>\r\n                            <Button color={activity.isCancelled ? \"green\" : \"red\"}\r\n                                floated=\"left\"\r\n                                basic\r\n                                content={activity.isCancelled ? \"Re-activate Activity\" : \"Cancel Activity\"}\r\n                                onClick={cancelActivityToggle}\r\n                                loading={updating} />\r\n                            <Button disabled={activity.isCancelled} as={Link} to={`/editActivity/${activity.id}`} color='orange' floated='right'>\r\n                                Manage Event\r\n                            </Button>\r\n                        </>\r\n                    ) : activity.isGoing ? (\r\n                        <Button loading={updating} onClick={updateAttendence} >Cancel attendance</Button>\r\n                    ) : (\r\n                        <Button disabled={activity.isCancelled} loading={updating} onClick={updateAttendence} color='teal'>Join Activity</Button>\r\n                    )}\r\n\r\n\r\n\r\n\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../App/Models/Activity\";\r\nimport {format} from \"date-fns\"\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, \"dd MMM yyyy h:mm aa\" )}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../App/Models/Activity'\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? \"Person\" : \"People\"} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.userName}>\r\n                            {attendee.userName === host?.userName &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/Images/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profile/${attendee.userName}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n\r\n\r\n\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n\r\n\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../App/Stores/store\";\r\nimport LoadingComponent from \"../../Loading\";\r\nimport ActivityDetailedChat from \"./activityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./activityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./activityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./activityDetailedSidebar\";\r\n\r\n\r\nexport default observer(function ActivityDetails() {\r\n    \r\n    const {id} = useParams<{id: string}>();\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, isLoading, getActivity, clearSelectedActivity} = activityStore;\r\n    useEffect(()=>\r\n    {   if(id)\r\n        {\r\n            getActivity(id);\r\n\r\n        }\r\n        return clearSelectedActivity;\r\n    }, [getActivity,id, clearSelectedActivity])\r\n    \r\n\r\n    if(!activity || isLoading){return (<LoadingComponent/>);}\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width=\"10\">\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <ActivityDetailedSidebar activity={activity}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n});","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './errors/ValidationErrorrs';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n    const [errors, setErrors] = useState(null);\r\n\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&(\r\n                <ValidationErrors errors={errors}/>\r\n            )}\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n","import React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\"\r\n\r\nexport default function NotFound()\r\n{\r\n    return (\r\n        \r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name=\"search\"/>\r\n                Nema ništa - jebiga!\r\n            </Header>\r\n            <Segment inline>\r\n                <Button as={Link} to=\"/activities\">\r\n                    Go back to activities\r\n                </Button>\r\n            </Segment>\r\n        </Segment>\r\n        \r\n        \r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\"\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../App/Stores/store\"\r\n\r\nexport default observer(function ServerError() {\r\n    const { commonStore } = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as=\"h1\" content=\"server error\" />\r\n            <Header color=\"red\" sub as=\"h5\" content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as=\"h5\" color=\"teal\" content=\"Stack trace\" />\r\n                    <code style={{marginTop: 10}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\"\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../Stores/store\"\r\n\r\nexport default observer(function ModalContainer()\r\n{\r\n    const {modalStore} = useStore();\r\n\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size=\"mini\">\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>   \r\n    )\r\n\r\n});","import { Formik, Form } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\"\r\nimport { Button, Container } from \"semantic-ui-react\";\r\nimport { EditProfile, Profile } from \"../../App/Models/profile\";\r\nimport * as Yup from \"yup\" \r\nimport MyTextInPut from \"../../App/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../App/common/form/MyTextArea\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\n\r\ninterface Props\r\n{\r\n    profile: Profile;\r\n    setEdit: (edit: boolean)=>void;\r\n}\r\n\r\n\r\nexport default observer(function EditProfileForm({profile, setEdit}: Props)\r\n{\r\n    const editProfile: EditProfile =\r\n    {\r\n        displayName: profile.displayName,\r\n        bio: profile.bio? profile.bio : \"\"\r\n    }\r\n\r\n    const {profileStore: {loading, editProfileHandler}} = useStore();\r\n    \r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required(),\r\n        bio: Yup.string()\r\n    });\r\n\r\n    async function handleEditProfile(editProfile: EditProfile)\r\n    {\r\n        await editProfileHandler(editProfile);\r\n        setEdit(false);\r\n        \r\n    }\r\n\r\n    return(\r\n        <Container clearing>\r\n            <Formik enableReinitialize validationSchema={validationSchema} \r\n            initialValues={editProfile}\r\n            onSubmit={(values)=>handleEditProfile(values)}>\r\n                {({handleSubmit, dirty, isSubmitting, isValid})=>(\r\n                    <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                        <MyTextInPut name=\"displayName\" placeholder=\"Display name\"/>\r\n                        <MyTextArea name=\"bio\" placeholder=\"Bio\" rows={4}/>\r\n                        <Button  floated=\"right\" type=\"submit\" loading={loading} disabled={!dirty || !isValid || isSubmitting} positive content=\"Edit profile\"/>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Container>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\"\r\nimport { Button, Container, Grid, Header, Tab } from \"semantic-ui-react\"\r\nimport { Profile } from \"../../App/Models/profile\";\r\nimport { useStore } from \"../../App/Stores/store\"\r\nimport EditProfileForm from \"./EditProfileForm\";\r\n\r\ninterface Props\r\n{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileAbout({profile}: Props) {\r\n\r\n    const {profileStore: {isCurrentUser}} = useStore();\r\n    \r\n    const [edit, setEdit] = useState(false);\r\n\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated=\"left\" icon=\"user\" content=\"About\"/>\r\n                    {isCurrentUser && \r\n                    <Button floated=\"right\" content={edit? \"Cancel\" : \"Edit\"} basic onClick={()=>setEdit(!edit)}/>\r\n                    }\r\n                    \r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                {edit ? (\r\n                        <EditProfileForm profile={profile} setEdit={setEdit}/>           \r\n                    ): (\r\n                        <Container>\r\n                            <p style={{whiteSpace: \"pre-wrap\"}}>{profile.bio}</p>\r\n                        </Container>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n});","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../App/Stores/store';\r\nimport { UserActivity } from '../../App/Models/profile';\r\n\r\n\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }]; \r\n\r\nexport default observer(function ProfileActivities() \r\n{\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => \r\n    {\r\n        loadUserActivities(profile!.userName);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => \r\n    {\r\n        loadUserActivities(profile!.userName, panes[data.activeIndex as     number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}>\r\n                                <Image\r\n                                    src={`/assets/Images/categoryImages/${activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\"\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowing()\r\n{\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return(\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated=\"left\" icon=\"user\" \r\n                    content={activeTab ===3?`People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}/>\r\n                </Grid.Column>  \r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile=>\r\n                            {\r\n                                \r\n                                return <ProfileCard key={profile.userName} profile={profile}/>\r\n                            })}\r\n                    </Card.Group>\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n});","import React from \"react\"\r\nimport { Cropper } from \"react-cropper\"\r\nimport \"cropperjs/dist/cropper.css\"\r\n\r\ninterface Props\r\n{\r\n    imagePreview: string;\r\n    setCropper: (croper: Cropper)=>void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props)\r\n{\r\n    return(\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: \"100%\"}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview=\".img-preview\"\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper=>setCropper(cropper)}\r\n\r\n        />\r\n\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props\r\n{\r\n    setFiles: (files: any)=>void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n\r\n    const dzStyles=\r\n    {\r\n        border: \"dashed 3px #eee\",\r\n        borderColor: \"#eee\",\r\n        borderRadius: \"5px\",\r\n        paddingTop: \"30px\",\r\n        textAlign: \"center\" as \"center\",\r\n        height: 200\r\n    };\r\n\r\n    const dzActive=\r\n    {\r\n        borderColor: \"green\"\r\n    }\r\n\r\n\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file: any)=>\r\n    {\r\n        return Object.assign(file, {preview: URL.createObjectURL(file)});\r\n    }))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive? {...dzStyles, ...dzActive}:dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon name=\"upload\" size=\"huge\"/>\r\n      <Header content=\"drop Image here\"/>\r\n      \r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\"\r\nimport { Button, Grid, Header} from \"semantic-ui-react\"\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\"\r\n\r\ninterface Props\r\n{\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob)=>void;\r\n}\r\n\r\nexport default function PhotoUploadWidgets({loading, uploadPhoto}: Props)\r\n{\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop()\r\n    {\r\n        if(cropper)\r\n        {\r\n            cropper.getCroppedCanvas().toBlob(blob=>uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(()=>\r\n    {\r\n        return ()=>{\r\n            files.forEach((file: any)=>URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n\r\n    return(\r\n        <Grid>\r\n            \r\n            <Grid.Column width={4}>\r\n                <Header sub color=\"teal\" content=\"Step 1 - Add Photo\"/>\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>  \r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header sub color=\"teal\" content=\"Step 2 - Resize Image\"/>\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview}/>\r\n                )}\r\n            </Grid.Column> \r\n            <Grid.Column width={1}/>\r\n\r\n            <Grid.Column width={4}>\r\n                <Header sub color=\"teal\" content=\"Step 3 - Preview and Upload\"/>\r\n                {files && files.length > 0 && <>\r\n                <div className=\"img-preview\" style={{minHeight:200, overflow: \"hidden\"}}/>\r\n                <Button.Group widths={2}>\r\n                    <Button loading={loading} onClick={onCrop} positive icon=\"check\"/>\r\n                    <Button disabled={loading} onClick={()=>setFiles([])} icon=\"close\"/>\r\n                    </Button.Group>\r\n                </>}\r\n            </Grid.Column> \r\n           \r\n\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\"\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidgets from \"../../App/common/imageUpload/PhotoUploadWidgets\";\r\nimport { Photo, Profile } from \"../../App/Models/profile\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n\r\n    const [target, setTarget]=useState(\"\");\r\n\r\n    function handlePhotoUpload(file: Blob)\r\n    {\r\n        uploadPhoto(file).then(()=>setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>)\r\n    {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>)\r\n    {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\r\n                    {isCurrentUser && (\r\n                        <Button floated=\"right\" basic\r\n                            content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)} />\r\n\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidgets uploadPhoto={handlePhotoUpload} loading={uploading}/>\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map((photo, i) => (\r\n                                <Card key={i}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color=\"green\"\r\n                                                content=\"Main\"\r\n                                                name={photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target===photo.id && loading}\r\n                                                onClick={e=>handleSetMainPhoto(photo, e)}\r\n                                                />\r\n                                            <Button basic\r\n                                                color=\"red\" \r\n                                                icon=\"trash\" \r\n                                                name={photo.id+\"del\"}\r\n                                                loading={target===photo.id+\"del\"}\r\n                                                onClick={e=>handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                            \r\n                                                />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            )\r\n\r\n\r\n\r\n                            )}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n        </Tab.Pane>)\r\n\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\"\r\nimport { Tab } from \"semantic-ui-react\"\r\nimport { Profile } from \"../../App/Models/profile\";\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\"\r\n\r\ninterface Props\r\n{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props)\r\n{\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: \"About\", render : ()=><ProfileAbout profile={profile}/>},\r\n        {menuItem: \"Photos\", render : ()=><ProfilePhotos profile={profile}/>},\r\n        {menuItem: \"Events\", render : ()=><ProfileActivities/>},\r\n        {menuItem: \"Followers\", render : ()=><ProfileFollowings/>},\r\n        {menuItem: \"Following\", render : ()=><ProfileFollowings/>}\r\n    ];\r\n\r\n    return(\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition=\"right\"\r\n            panes={panes}\r\n            onTabChange={(e, data) =>profileStore.setActiveTab(data.activeIndex)}\r\n\r\n        />\r\n    )\r\n\r\n     \r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\"\r\nimport {  Divider, Grid, GridColumn, Header, Item, Segment, Statistic } from \"semantic-ui-react\"\r\nimport { Profile } from \"../../App/Models/profile\"\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props\r\n{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props)\r\n{\r\n    return(\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size=\"small\" src = {profile?.image || \"/assets/Images/user.png\"}/>\r\n                            <Item.Content verticalAlign=\"middle\">\r\n                                <Header as=\"h1\" content={profile?.displayName}/>\r\n                            </Item.Content>\r\n\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n\r\n                <GridColumn width={4}>\r\n                    <Statistic.Group width={2}>\r\n                        <Statistic label=\"Followers\" value={profile.followersCount}/>\r\n                        <Statistic label=\"Following\" value={profile.followingCount}/>\r\n                    </Statistic.Group>\r\n                    <Divider/>\r\n                    <FollowButton profile={profile}/>\r\n                    \r\n\r\n                </GridColumn>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\"\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\"\r\nimport { useStore } from \"../../App/Stores/store\";\r\nimport LoadingComponent from \"../Loading\";\r\nimport ProfileContent from \"./ProfileContent\"\r\nimport ProfileHeader from \"./ProfileHeader\"\r\n\r\nexport default observer(function ProfilePage()\r\n{\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadProfile, loadingProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(()=>{\r\n        loadProfile(username);\r\n        return ()=>setActiveTab(0);\r\n    },[loadProfile, username, setActiveTab])\r\n\r\n    if(loadingProfile)return <LoadingComponent content=\"Loading Profile...\"/>\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&<>\r\n                <ProfileHeader profile={profile}/>\r\n                <ProfileContent profile={profile}/>\r\n                </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n});","import React from \"react\";\r\nimport { Redirect, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { Route } from \"react-router-dom\";\r\nimport {useStore} from \"../Stores/store\"\r\n\r\ninterface Props extends RouteProps\r\n{\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props)\r\n{\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return(\r\n        <Route\r\n            {...rest}\r\n            render={(props)=>isLoggedIn ? <Component {...props}/>: <Redirect to=\"/\"/>}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport \"./style.css\"\r\n\r\nimport NavBar from './Navbar';\r\nimport ActivityDashboard from '../../Features/activities/dashboard/ActivityDashboard';\r\nimport { Container } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router';\r\nimport Home from '../../Features/Home/Home';\r\nimport ActivityForm from '../../Features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../Features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../Features/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../Features/errors/NotFound';\r\nimport ServerError from '../../Features/errors/ServerError';\r\nimport { useStore } from '../Stores/store';\r\nimport LoadingComponent from '../../Features/Loading';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../Features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nfunction App() {\r\n\r\n  const key = useLocation().key;\r\n  const {commonStore, userStore } = useStore();\r\n\r\n  useEffect(()=>\r\n  {\r\n    if(commonStore.token)\r\n    {\r\n      userStore.getUser().finally(()=>commonStore.setAppLoaded());\r\n    }\r\n    else\r\n    {\r\n      userStore.getFacebookLoginStatus().then(()=>commonStore.setAppLoaded());\r\n      \r\n    }\r\n  },[commonStore, userStore])\r\n\r\n  if(!commonStore.appLoaded) return <LoadingComponent content=\"Loading App...\"/>\r\n\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer position=\"bottom-right\" hideProgressBar />\r\n      <ModalContainer/>\r\n      <Route exact path=\"/\" component={Home} />\r\n\r\n      <Route path=\"/(.+)\" render={() => {\r\n        return (\r\n          <>\r\n            <NavBar />\r\n\r\n            <Container style={{ marginTop: \"7em\" }}>\r\n              <Switch>\r\n                <PrivateRoute exact path=\"/activities\" component={ActivityDashboard} />\r\n                <PrivateRoute path=\"/activities/:id\" component={ActivityDetails} />\r\n                <PrivateRoute key={key} path={[\"/createActivity\", \"/editActivity/:id\"]} component={ActivityForm} />\r\n                <PrivateRoute path=\"/profiles/:username\" component={ProfilePage} />\r\n                <PrivateRoute path=\"/errors\" component={TestErrors} />\r\n                <Route path=\"/server-error\" component={ServerError}/>\r\n                <Route component={NotFound}/>\r\n              </Switch>\r\n            </Container>\r\n        </>\r\n        )\r\n      }}/>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          </>\r\n        );\r\n      }\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App/Layout/style.css';\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport App from './App/Layout/App';\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store, StoreContext} from \"./App/Stores/store\"\r\nimport { Router } from 'react-router-dom';\r\nimport {createBrowserHistory} from \"history\";\r\nimport ScrollToTop from './App/Layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n\r\n  <StoreContext.Provider value={store}>\r\n    <Router history={history}>\r\n      <ScrollToTop/>\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n    \r\n \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}